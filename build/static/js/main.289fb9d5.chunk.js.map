{"version":3,"sources":["store/actions/index.js","store/reducers/index.jsx","store/reducers/reducer_main_menu_items.jsx","App.jsx","serviceWorker.jsx","index.jsx"],"names":["FETCH_MAIN_MENU_ITEMS","FETCH_OTHER_MENU_ITEMS","rootReducer","combineReducers","menuItemsReducer","state","arguments","length","undefined","action","type","_","mapKeys","payload","data","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","selectedMainMenuItem","selectedOtherMenuItem","_this$state","react_default","a","createElement","BrowserRouter","className","styles","wrapper","header","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","middleware","thunk","store","createStore","reducer","applyMiddleware","apply","root","document","getElementById","ReactDOM","render","src_App","es","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","catch","checkValidServiceWorker"],"mappings":"0QAEaA,SAAwB,yBACxBC,EAAyB,yBCCtC,IAEeC,EAFKC,YAAgB,CAAEC,iBCDvB,WAA8C,IAApBC,EAAoBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,GAAIG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3D,OAAQC,EAAOC,MACb,KAAKV,EAEL,KAAKC,EACH,OAAOU,IAAEC,QAAQH,EAAOI,QAAQC,KAAM,WACxC,QACE,OAAOT,uECsBEU,cA3Bb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKd,MAAQ,CACXkB,qBAAsB,KACtBC,sBAAuB,MAJbR,qHAYL,IAAAS,EACiDN,KAAKd,MAArDkB,EADDE,EACCF,qBAAsBC,EADvBC,EACuBD,sBAC9B,OACEE,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAOC,SACrBN,EAAAC,EAAAC,cAAA,UAAQE,UAAWC,IAAOE,QACxBP,EAAAC,EAAAC,cAAA,SAAIL,GACJG,EAAAC,EAAAC,cAAA,SAAIJ,aApBEU,aCQZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEgB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DAIJ,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7C,QACfuC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,SCrCjC,IAAMU,EAAa,CAACC,KAGpB,IAOgBzB,EAPV0B,EAAQC,YACZC,EACAC,IAAeC,WAAf,EAAmBN,IAGfO,EAAOC,SAASC,eAAe,QAErBjC,EAWTnB,EAVLqD,IAASC,OACP3C,EAAAC,EAAAC,cAAC0C,EAAD,KACE5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAUX,MAAOA,GACflC,EAAAC,EAAAC,cAACM,EAAD,QAGJ+B,GD4DG,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI4B,IAAIC,GAAwBpC,OAAOC,UAC3CoC,SAAWrC,OAAOC,SAASoC,OAIvC,OAGFrC,OAAOsC,iBAAiB,OAAQ,WAC9B,IAAMjC,EAAK,GAAAkC,OAAMH,GAAN,sBAEPtC,GAzCV,SAAiCO,EAAOC,GAEtCkC,MAAMnC,GACHK,KAAK,SAAC+B,GAGiB,MAApBA,EAASC,SAC0D,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAGhDtC,UAAUC,cAAcsC,MAAMpC,KAAK,SAACC,GAClCA,EAAaoC,aAAarC,KAAK,WAC7BV,OAAOC,SAAS+C,aAKpB5C,EAAgBC,EAAOC,KAG1B2C,MAAM,WACLhC,QAAQC,IACN,mEAqBAgC,CAAwB7C,EAAOC,GAI/BC,UAAUC,cAAcsC,MAAMpC,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MC3E/BE","file":"static/js/main.289fb9d5.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const FETCH_MAIN_MENU_ITEMS = 'fetch_main_menu_items';\nexport const FETCH_OTHER_MENU_ITEMS = 'fetch_other_menu_items';\n\nconst ROOT_URL = 'https://nr3zj.mocklab.io/recommended/';\n\nexport function fetchMainMenuItems() {\n  const request = axios.get(`${ROOT_URL}/season`);\n  return {\n    type: FETCH_MAIN_MENU_ITEMS,\n    payload: request,\n  };\n}\n\nexport function fetchOtherMenuItems() {\n  const request = axios.get(`${ROOT_URL}/others`);\n  return {\n    type: FETCH_OTHER_MENU_ITEMS,\n    payload: request,\n  };\n}\n","import { combineReducers } from 'redux';\n\nimport menuItemsReducer from './reducer_main_menu_items';\n\nconst rootReducer = combineReducers({ menuItemsReducer });\n\nexport default rootReducer;\n","import _ from 'lodash';\nimport { FETCH_MAIN_MENU_ITEMS, FETCH_OTHER_MENU_ITEMS } from '../actions';\n\nexport default function menuItemsReducer(state = {}, action) {\n  switch (action.type) {\n    case FETCH_MAIN_MENU_ITEMS:\n      return _.mapKeys(action.payload.data, 'menu_id');\n    case FETCH_OTHER_MENU_ITEMS:\n      return _.mapKeys(action.payload.data, 'menu_id');\n    default:\n      return state;\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport styles from './panecillo.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedMainMenuItem: null,\n      selectedOtherMenuItem: null,\n    };\n  }\n\n  componentDidMount() {\n    //\n  }\n\n  render() {\n    const { selectedMainMenuItem, selectedOtherMenuItem } = this.state;\n    return (\n      <BrowserRouter>\n        <div className={styles.wrapper}>\n          <header className={styles.header}>\n            <p>{selectedMainMenuItem}</p>\n            <p>{selectedOtherMenuItem}</p>\n          </header>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    });\n  // .catch((error) => ({\n\n  //   console.error('Error during service worker registration:', error);\n  // }));\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404\n        || response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nimport reducer from './store/reducers';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst middleware = [thunk];\nif (process.env.NODE_ENV !== 'production') middleware.push(logger);\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(...middleware),\n);\n\nconst root = document.getElementById('root');\n\nconst render = (Component) => {\n  ReactDOM.render(\n    <App>\n      <Provider store={store}>\n        <Component />\n      </Provider>\n    </App>,\n    root,\n  );\n};\n\nrender(App);\n\nif (module.hot) {\n  module.hot.accept('./App', () => { render(App); });\n  module.hot.accept('./store/reducers', () => { store.replaceReducer(reducer); });\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}